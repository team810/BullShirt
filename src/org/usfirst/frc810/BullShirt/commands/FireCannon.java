// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc810.BullShirt.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc810.BullShirt.Robot;

/**
 *
 */
public class FireCannon extends Command {
	

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private int m_SafetyButton;
    private int m_CannonNumber;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public FireCannon(int SafetyButton, int CannonNumber) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_SafetyButton = SafetyButton;
        m_CannonNumber = CannonNumber;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	finishTime=Long.MAX_VALUE;
    }

    long finishTime;
    boolean started;
    boolean safetyBad;
    
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	if(!started && !safetyBad)
    	{
    	
    		if(Robot.oi.getGamepad().getRawButton(m_SafetyButton))
    		{
        	
    			Robot.cannon.closeValve(m_CannonNumber + 4);
        		Robot.cannon.openValve(m_CannonNumber);
        		finishTime = System.currentTimeMillis()+150;
        		started=true;
        		System.out.println("Started 1" + m_CannonNumber);
        	
    		}
    		else
    		{
    		
    			Robot.cannon.closeValve(m_CannonNumber);
        		Robot.cannon.openValve(m_CannonNumber + 4);
    			safetyBad = true;
    			System.out.println("Started 2");
    		
    		}
    		
    	}
    	else
    	{
    		
    		if(!Robot.oi.gamepad.getRawButton(m_SafetyButton) || safetyBad)
    		{
    		
    			Robot.cannon.closeValve(m_CannonNumber);
    			Robot.cannon.openValve(m_CannonNumber + 4);
    			safetyBad=true;
    			System.out.println("Safety bad");
    		
    		}
    		else
    		{
    		
    			Robot.cannon.openValve(m_CannonNumber);
    			Robot.cannon.closeValve(m_CannonNumber+4);
    			System.out.println("Cannon " + m_CannonNumber + " Open");
    		
    		}
    	}
    	
    	
    
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return safetyBad||(finishTime<System.currentTimeMillis());
    }

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("Finished");
    	Robot.cannon.closeValve(m_CannonNumber);
    	Robot.cannon.openValve(m_CannonNumber+4);
    	started=false;
    	safetyBad=false;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
